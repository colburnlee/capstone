<?xml version="1.0" encoding="UTF-8"?><!-- Do not edit this file with editors other than diagrams.net --><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="361px" height="210px" viewBox="-0.5 -0.5 361 210" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2022-01-21T04:43:36.789Z&quot; agent=&quot;5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot; etag=&quot;MEET5VWMpIjBpEoQuyin&quot; version=&quot;16.0.3&quot; type=&quot;google&quot;&gt;&lt;diagram id=&quot;C5RBs43oDa-KdzZeNtuy&quot; name=&quot;Page-1&quot;&gt;7VnbctowEP0aHun4goE8AgGSlCQ0NJdXYQtbRZZcWQTI13dtZBvXOIE0kCZhhhm8q9Vtz1nrCCpmx1/0BQq8S+5gWjE0Z1ExTyuGodfrBnxFnuXK09RqK4criKOCMseIPGHl1JR3Rhwc5gIl51SSIO+0OWPYljkfEoLP82ETTvOzBsjFBcfIRrTovSeO9NQujEbmP8PE9ZKZ9frJqsVHSbDaSeghh8/XXGa3YnYE53L15C86mEbJS/Jyf768p4NpvX/xI/yNbtvff17dVVeD9Xbpkm5BYCZfPfTTdNI7u6v9egiGvR9zrd8aX1SrukrDI6IzlTCbojCMku/4hN2GWKjdy2WS0nBOfIoYWO0JZ3KkWjSwESUug2cbVgo9zfYjFpIAGi3VIHkAXtsj1BmgJZ9F+wklsqeJ1fa4IE8wLKLQpIMDmoVUxDLquYhR1FNNLXAIMcMkSXrqGqBQqhibU4qCkIzjBUchPhIuYW0uJfeTgfiMOdhRVop6bEjBpymPov5bQqMgjLKBF2vEVFD1MfexFEsIUa1QZ6suy6QQlT3PSJz6vHUCJ3RFqnDcdOx0uhsoNMRcSEI6n2X9NV9ty/kAkdx0iALwDEncjtIYrlMSHta2mrliou5C2maBtFfIxwWeQqrlGicpnshSRoYBsglzB3HMaS3z3KitRi4OfSc0ZoNHHAezmC0SSTROKyDghMk4F1YbPpCxjvbNqliwoA7YembDJwoXssMZEAuRmEEY2DrHEWM3cOv5Gn6ZXMs8Zrtiu06lHKg7I3hSQLDrIxL1azkOlG346cB85q3iSZ+qx71BbhmHg/zBGJoPreubk8ZcXwx7l0gfXFetAuJDOGfmXDhfGuoCglujXwp1o/nOUBsFqAsQu5CjoDQDSgsqdDIFtt0xW3qmvvZINbTmnjJlHiJT5RgVM3WQVGwktVYqRO1ZCOIMi120qHHUoi+S7uWz45/YUK41DTNfiI3/WGoeleaGGv04QrN4FA09ziIuXs388Yb3yUdH8k1l5s54H1Jlblxx8UA93iv2CfghtebGFRevFR0lF84/38ViXyjqyW+673ZlqBXf05/1dliq5bfDtRxE85Uy6s1ALEr4USSXT0GhfU0Uy+V3OYqW9c4oFiVvlzlHDHfBsLm/SgQz+8dpdcvJ/rczu38A&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><clipPath id="mx-clip-204-31-152-26-0"><rect x="204" y="31" width="152" height="26"/></clipPath><clipPath id="mx-clip-204-57-152-26-0"><rect x="204" y="57" width="152" height="26"/></clipPath><clipPath id="mx-clip-204-83-152-26-0"><rect x="204" y="83" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-31-152-26-0"><rect x="4" y="31" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-57-152-26-0"><rect x="4" y="57" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-83-152-26-0"><rect x="4" y="83" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-109-152-26-0"><rect x="4" y="109" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-135-152-26-0"><rect x="4" y="135" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-160-152-26-0"><rect x="4" y="160" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-185-152-26-0"><rect x="4" y="185" width="152" height="26"/></clipPath></defs><g><path d="M 200 26 L 200 0 L 360 0 L 360 26" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 200 26 L 200 120 L 360 120 L 360 26" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 200 26 L 360 26" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="279.5" y="17.5">class adminUser</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-204-31-152-26-0)" font-size="12px"><text x="205.5" y="43.5">Name</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-204-57-152-26-0)" font-size="12px"><text x="205.5" y="69.5">Email Address</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-204-83-152-26-0)" font-size="12px"><text x="205.5" y="95.5">Password</text></g><path d="M 0 26 L 0 0 L 160 0 L 160 26" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 26 L 0 208 L 160 208 L 160 26" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 26 L 160 26" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-style="italic" pointer-events="none" text-anchor="middle" font-size="12px"><text x="79.5" y="17.5">class customerUser</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-31-152-26-0)" font-size="12px"><text x="5.5" y="43.5">Name</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-57-152-26-0)" font-size="12px"><text x="5.5" y="69.5">Phone Number</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-83-152-26-0)" font-size="12px"><text x="5.5" y="95.5">Email Address</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-109-152-26-0)" font-size="12px"><text x="5.5" y="121.5">CustomerId</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-135-152-26-0)" font-size="12px"><text x="5.5" y="147.5">Password</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-160-152-26-0)" font-size="12px"><text x="5.5" y="172.5">StartDate</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-185-152-26-0)" font-size="12px"><text x="5.5" y="197.5">EndDate</text></g></g></svg>